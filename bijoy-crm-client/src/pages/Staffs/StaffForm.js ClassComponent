import React, { useState, useEffect, Component } from "react";
import { Grid, makeStyles } from "@material-ui/core";
import Controls from "../../components/controls/Controls";
import { useForm, Form } from "../../components/useForm";
import Select from 'react-select';  
import axios from 'axios'; 
import props from 'prop-types';
/*import List from '@material-ui/core/List';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import Checkbox from '@material-ui/core/Checkbox';*/
import Button from "@material-ui/core/Button";
import Divider from "@material-ui/core/Divider";
import { connect } from "react-redux";
import * as actions from "../../actions/staffs";
import * as actionService from "../../actions/services";
import ButterToast, { Cinnamon } from "butter-toast";
import { AssignmentTurnedIn } from "@material-ui/icons";
import Staff from "./Staff";
// import * as employeeService from "../../services/employeeService";

const initialFValues = {
  id: 0,
  serviceId: "",
  name: "",
  email: "",
  mobile: null,
};
const useStyles = makeStyles((theme) => ({
  searviceInput: {
    width: "100%",
  },
  cardHeader: {
    padding: theme.spacing(1, 2),
  },
  list: {
    width: 200,
    height: 230,
    backgroundColor: theme.palette.background.paper,
    overflow: "auto",
  },
  ServiceDDL: {
    width: "100%"
  }
}));
  const addOrEdit = (staff, resetForm) => {
    // window.alert('valid')
    const onSuccess = () => {
      ButterToast.raise({
        content: (
          <Cinnamon.Crisp
            title="Service Box"
            content="Submitted successfully"
            scheme={Cinnamon.Crisp.SCHEME_PURPLE}
            icon={<AssignmentTurnedIn />}
          />
        ),
      });
    };
    
 

    resetForm();
    //  setRecordForEdit(null)
   // setOpenPopup(false);
    // setRecords(employeeService.getAllEmployees())
  };
  
  // useEffect(() => {
  //   if (recordForEdit != null)
  //     setValues({
  //       ...recordForEdit,
  //     });
  // }, [recordForEdit]);
export class StaffForm extends Component {  
  
   StaffForm = (props) => {
    const [openPopup, setOpenPopup] = useState(false);
   // const [openPopup, setOpenPopup] = useState(false);
   var {
    values,
    setValues,
    errors,
    setErrors,
    handleInputChange,
    resetForm,
  } = useForm(initialFValues, props.setCurrentId);
    const classes = useStyles();
    //const classes = useStyles();
    const { recordForEdit } = props;
    
    const validate = () => {
      let temp = { ...errors };
      temp.name = values.name ? "" : "This field is required.";
      setErrors({
        ...temp,
      });
      return Object.values(temp).every((x) => x == "");
    };
    const handleSubmit = (e) => {
      e.preventDefault();
  
      if (validate()) {
        //   const { addOrEdit } = props
        /*if (props.currentId == 0 || props.currentId == null)
                  props.createService(values, onSuccess)
              else
                  props.updateService(props.currentId, values, onSuccess)
              */
        addOrEdit(values, resetForm);
      }
    };
    const [items, setItems] = useState();
    // Just a data fetching function
    const fetchURL = "http://localhost:4000/services/";
    const getItems = () => fetch(fetchURL).then((res) => res.json());
    useEffect(() => {
      getItems().then((data) => setItems(data));
      // console.log(data);
    }, []);
  
    let itemsToRender;
    if (items) {
      itemsToRender = items.map((item) => {
        return <option values={item._id}>{item.name}</option>;
      });
    }
  
    const addOrEdit = (staff, resetForm) => {
      // window.alert('valid')
      const onSuccess = () => {
        ButterToast.raise({
          content: (
            <Cinnamon.Crisp
              title="Service Box"
              content="Submitted successfully"
              scheme={Cinnamon.Crisp.SCHEME_PURPLE}
              icon={<AssignmentTurnedIn />}
            />
          ),
        });
      };
      if (staff._id == 0 || staff._id == null) {
        //  window.alert('new record will be inserted')
        //employeeService.insertEmployee(employee)
        props.createStaff(values, onSuccess);
      } else {
        // employeeService.updateEmployee(employee)
        props.updateStaff(staff._id, values, onSuccess);
      }
  
      resetForm();
      //  setRecordForEdit(null)
      setOpenPopup(false);
      // setRecords(employeeService.getAllEmployees())
    };
  
    
    useEffect(() => {
      if (recordForEdit != null)
        setValues({
          ...recordForEdit,
        });
    }, [recordForEdit]);
  
    return (
      <Form onSubmit={handleSubmit} autoComplete="off" noValidate>
        <Grid container>
          {/* </Grid> */}
          <Grid item xs={6}>
          
            <Controls.Input
              className={classes.searviceInput}
              name="name"
              label="Staff Name"
              value={values.name}
              onChange={handleInputChange}
              error={errors.name}
            />
            <Controls.Input
              className={classes.searviceInput}
              name="email"
              label="Email"
              value={values.email}
              onChange={handleInputChange}
              error={errors.email}
            />
            <Controls.Input
              className={classes.searviceInput}
              name="mobile"
              label="Mobile"
              value={values.mobile}
              onChange={handleInputChange}
              error={errors.mobile}
            />
            <Select name="serviceId" className={classes.ServiceDDL} onChange={handleInputChange}>
            {itemsToRender}
          </Select>
          {/* <Controls.Select
                          name="serviceId"
                          label="Service"
                          value={values.serviceId}
                          onChange={handleInputChange}
                          options={employeeService.getDepartmentCollection()}
                          error={errors.departmentId}
                      /> */}
            <div>
              <Controls.Button type="submit" text="Submit" />
              <Controls.Button text="Reset" color="default" onClick={resetForm} />
            </div>
          </Grid>
        </Grid>
      </Form>
    );
  };

}
// export default connect(mapStateToProps, mapActionToProps)(StaffForm);
// export default StaffForm;
const mapStateToProps = (state) => ({
  staffList: state.staffs.list,
  serviceList: state.services.list,
});

const mapActionToProps = {
  createStaff: actions.create,
  updateStaff: actions.update,
  fetchAllServices: actionService.fetchAll,
};
// export default StaffForm;
export default connect(mapStateToProps, mapActionToProps)(StaffForm);